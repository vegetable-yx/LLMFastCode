{"params":[["i_y_1024","float",1024],["result","float",4096]],"code":"void slow_performance(float *i_y_1024, float *result)\n{\n    float *tmp_1 = i_y_1024;\n    float tmp_2[4 * 256];\n    for (int i_2 = 0; i_2 < 4; i_2++)\n    {\n        for (int j_2 = 0; j_2 < 256; j_2++)\n        {\n            tmp_2[j_2 * 4 + i_2] = tmp_1[i_2 * 256 + j_2];\n        }\n    }\n    float *tmp_3 = i_y_1024;\n    float tmp_4[64 * 64];\n    for (int i_4 = 0; i_4 < 64; i_4++)\n    {\n        for (int k_4 = 0; k_4 < 64; k_4++)\n        {\n            tmp_4[i_4 * 64 + k_4] = 0;\n            for (int j_4 = 0; j_4 < 16; j_4++)\n            {\n                tmp_4[i_4 * 64 + k_4] += tmp_2[i_4 * 16 + j_4] * tmp_3[j_4 * 64 + k_4];\n            }\n        }\n    }\n    for (int i_4 = 0; i_4 < 4096; i_4++)\n        result[i_4] = tmp_4[i_4];\n}"}
{"params":[["i_y_4096","float",4096],["i_z_1024","float",1024],["result","float",4096]],"code":"void slow_performance(float *i_y_4096, float *i_z_1024, float *result)\n{\n    float *tmp_1 = i_y_4096;\n    float *tmp_2 = i_z_1024;\n    float tmp_3[8 * 128];\n    for (int i_3 = 0; i_3 < 8; i_3++)\n    {\n        for (int j_3 = 0; j_3 < 128; j_3++)\n        {\n            tmp_3[j_3 * 8 + i_3] = tmp_2[i_3 * 128 + j_3];\n        }\n    }\n    float tmp_4[128 * 32];\n    for (int i_4 = 0; i_4 < 128; i_4++)\n    {\n        for (int k_4 = 0; k_4 < 32; k_4++)\n        {\n            tmp_4[i_4 * 32 + k_4] = 0;\n            for (int j_4 = 0; j_4 < 32; j_4++)\n            {\n                tmp_4[i_4 * 32 + k_4] += tmp_1[i_4 * 32 + j_4] * tmp_3[j_4 * 32 + k_4];\n            }\n        }\n    }\n    for (int i_4 = 0; i_4 < 4096; i_4++)\n        result[i_4] = tmp_4[i_4];\n}"}
{"params":[["i_z_4096","float",4096],["i_z_512","float",512],["result","float",512]],"code":"void slow_performance(float *i_z_4096, float *i_z_512, float *result)\n{\n    float *tmp_1 = i_z_4096;\n    float *tmp_2 = i_z_4096;\n    float *tmp_3 = i_z_512;\n    float tmp_4[64 * 8];\n    for (int i_4 = 0; i_4 < 64; i_4++)\n    {\n        for (int k_4 = 0; k_4 < 8; k_4++)\n        {\n            tmp_4[i_4 * 8 + k_4] = 0;\n            for (int j_4 = 0; j_4 < 64; j_4++)\n            {\n                tmp_4[i_4 * 8 + k_4] += tmp_2[i_4 * 64 + j_4] * tmp_3[j_4 * 8 + k_4];\n            }\n        }\n    }\n    float tmp_5[64 * 8];\n    for (int i_5 = 0; i_5 < 64; i_5++)\n    {\n        for (int k_5 = 0; k_5 < 8; k_5++)\n        {\n            tmp_5[i_5 * 8 + k_5] = 0;\n            for (int j_5 = 0; j_5 < 64; j_5++)\n            {\n                tmp_5[i_5 * 8 + k_5] += tmp_1[i_5 * 64 + j_5] * tmp_4[j_5 * 8 + k_5];\n            }\n        }\n    }\n    for (int i_5 = 0; i_5 < 512; i_5++)\n        result[i_5] = tmp_5[i_5];\n}"}
{"params":[["i_z_4096","float",4096],["i_x_2048","float",2048],["result","float",512]],"code":"void slow_performance(float *i_z_4096, float *i_x_2048, float *result)\n{\n    float *tmp_1 = i_z_4096;\n    float *tmp_2 = i_x_2048;\n    float *tmp_3 = i_z_4096;\n    float tmp_4[16 * 32];\n    for (int i_4 = 0; i_4 < 16; i_4++)\n    {\n        for (int k_4 = 0; k_4 < 32; k_4++)\n        {\n            tmp_4[i_4 * 32 + k_4] = 0;\n            for (int j_4 = 0; j_4 < 128; j_4++)\n            {\n                tmp_4[i_4 * 32 + k_4] += tmp_2[i_4 * 128 + j_4] * tmp_3[j_4 * 32 + k_4];\n            }\n        }\n    }\n    float tmp_5[64 * 8];\n    for (int i_5 = 0; i_5 < 64; i_5++)\n    {\n        for (int k_5 = 0; k_5 < 8; k_5++)\n        {\n            tmp_5[i_5 * 8 + k_5] = 0;\n            for (int j_5 = 0; j_5 < 64; j_5++)\n            {\n                tmp_5[i_5 * 8 + k_5] += tmp_1[i_5 * 64 + j_5] * tmp_4[j_5 * 8 + k_5];\n            }\n        }\n    }\n    for (int i_5 = 0; i_5 < 512; i_5++)\n        result[i_5] = tmp_5[i_5];\n}"}
{"params":[["i_x_512","float",512],["i_x_4096","float",4096],["result","float",1024]],"code":"void slow_performance(float *i_x_512, float *i_x_4096, float *result)\n{\n    float *tmp_1 = i_x_512;\n    float *tmp_2 = i_x_4096;\n    float *tmp_3 = i_x_512;\n    float tmp_4[128 * 16];\n    for (int i_4 = 0; i_4 < 128; i_4++)\n    {\n        for (int k_4 = 0; k_4 < 16; k_4++)\n        {\n            tmp_4[i_4 * 16 + k_4] = 0;\n            for (int j_4 = 0; j_4 < 32; j_4++)\n            {\n                tmp_4[i_4 * 16 + k_4] += tmp_2[i_4 * 32 + j_4] * tmp_3[j_4 * 16 + k_4];\n            }\n        }\n    }\n    float tmp_5[16 * 64];\n    for (int i_5 = 0; i_5 < 16; i_5++)\n    {\n        for (int k_5 = 0; k_5 < 64; k_5++)\n        {\n            tmp_5[i_5 * 64 + k_5] = 0;\n            for (int j_5 = 0; j_5 < 32; j_5++)\n            {\n                tmp_5[i_5 * 64 + k_5] += tmp_1[i_5 * 32 + j_5] * tmp_4[j_5 * 64 + k_5];\n            }\n        }\n    }\n    for (int i_5 = 0; i_5 < 1024; i_5++)\n        result[i_5] = tmp_5[i_5];\n}"}
{"params":[["i_y_4096","float",4096],["i_x_2048","float",2048],["result","float",2048]],"code":"void slow_performance(float *i_y_4096, float *i_x_2048, float *result)\n{\n    float *tmp_1 = i_y_4096;\n    float *tmp_2 = i_y_4096;\n    float *tmp_3 = i_x_2048;\n    float tmp_4[32 * 16];\n    for (int i_4 = 0; i_4 < 32; i_4++)\n    {\n        for (int k_4 = 0; k_4 < 16; k_4++)\n        {\n            tmp_4[i_4 * 16 + k_4] = 0;\n            for (int j_4 = 0; j_4 < 128; j_4++)\n            {\n                tmp_4[i_4 * 16 + k_4] += tmp_2[i_4 * 128 + j_4] * tmp_3[j_4 * 16 + k_4];\n            }\n        }\n    }\n    float tmp_5[128 * 16];\n    for (int i_5 = 0; i_5 < 128; i_5++)\n    {\n        for (int k_5 = 0; k_5 < 16; k_5++)\n        {\n            tmp_5[i_5 * 16 + k_5] = 0;\n            for (int j_5 = 0; j_5 < 32; j_5++)\n            {\n                tmp_5[i_5 * 16 + k_5] += tmp_1[i_5 * 32 + j_5] * tmp_4[j_5 * 16 + k_5];\n            }\n        }\n    }\n    for (int i_5 = 0; i_5 < 2048; i_5++)\n        result[i_5] = tmp_5[i_5];\n}"}
{"params":[["i_z_3072","float",3072],["result","float",4096]],"code":"void slow_performance(float *i_z_3072, float *result)\n{\n    float *tmp_1 = i_z_3072;\n    float tmp_2[48 * 64];\n    for (int i_2 = 0; i_2 < 48; i_2++)\n    {\n        for (int j_2 = 0; j_2 < 64; j_2++)\n        {\n            tmp_2[j_2 * 48 + i_2] = tmp_1[i_2 * 64 + j_2];\n        }\n    }\n    float *tmp_3 = i_z_3072;\n    float tmp_4[48 * 64];\n    for (int i_4 = 0; i_4 < 48; i_4++)\n    {\n        for (int j_4 = 0; j_4 < 64; j_4++)\n        {\n            tmp_4[j_4 * 48 + i_4] = tmp_3[i_4 * 64 + j_4];\n        }\n    }\n    float tmp_5[64 * 64];\n    for (int i_5 = 0; i_5 < 64; i_5++)\n    {\n        for (int k_5 = 0; k_5 < 64; k_5++)\n        {\n            tmp_5[i_5 * 64 + k_5] = 0;\n            for (int j_5 = 0; j_5 < 48; j_5++)\n            {\n                tmp_5[i_5 * 64 + k_5] += tmp_2[i_5 * 48 + j_5] * tmp_4[j_5 * 64 + k_5];\n            }\n        }\n    }\n    for (int i_5 = 0; i_5 < 4096; i_5++)\n        result[i_5] = tmp_5[i_5];\n}"}
{"params":[["i_x_512","float",512],["i_z_1024","float",1024],["i_y_4096","float",4096],["result","float",512]],"code":"void slow_performance(float *i_x_512, float *i_z_1024, float *i_y_4096, float *result)\n{\n    float *tmp_1 = i_x_512;\n    float *tmp_2 = i_z_1024;\n    float tmp_3[16 * 32];\n    for (int i_3 = 0; i_3 < 16; i_3++)\n    {\n        for (int k_3 = 0; k_3 < 32; k_3++)\n        {\n            tmp_3[i_3 * 32 + k_3] = 0;\n            for (int j_3 = 0; j_3 < 32; j_3++)\n            {\n                tmp_3[i_3 * 32 + k_3] += tmp_1[i_3 * 32 + j_3] * tmp_2[j_3 * 32 + k_3];\n            }\n        }\n    }\n    float *tmp_4 = i_y_4096;\n    float tmp_5[8 * 64];\n    for (int i_5 = 0; i_5 < 8; i_5++)\n    {\n        for (int k_5 = 0; k_5 < 64; k_5++)\n        {\n            tmp_5[i_5 * 64 + k_5] = 0;\n            for (int j_5 = 0; j_5 < 64; j_5++)\n            {\n                tmp_5[i_5 * 64 + k_5] += tmp_3[i_5 * 64 + j_5] * tmp_4[j_5 * 64 + k_5];\n            }\n        }\n    }\n    for (int i_5 = 0; i_5 < 512; i_5++)\n        result[i_5] = tmp_5[i_5];\n}"}
{"params":[["i_y_3072","float",3072],["i_x_4096","float",4096],["i_y_1536","float",1536],["result","float",512]],"code":"void slow_performance(float *i_y_3072, float *i_x_4096, float *i_y_1536, float *result)\n{\n    float *tmp_1 = i_y_3072;\n    float *tmp_2 = i_x_4096;\n    float tmp_3[48 * 64];\n    for (int i_3 = 0; i_3 < 48; i_3++)\n    {\n        for (int k_3 = 0; k_3 < 64; k_3++)\n        {\n            tmp_3[i_3 * 64 + k_3] = 0;\n            for (int j_3 = 0; j_3 < 64; j_3++)\n            {\n                tmp_3[i_3 * 64 + k_3] += tmp_1[i_3 * 64 + j_3] * tmp_2[j_3 * 64 + k_3];\n            }\n        }\n    }\n    float *tmp_4 = i_y_1536;\n    float tmp_5[32 * 16];\n    for (int i_5 = 0; i_5 < 32; i_5++)\n    {\n        for (int k_5 = 0; k_5 < 16; k_5++)\n        {\n            tmp_5[i_5 * 16 + k_5] = 0;\n            for (int j_5 = 0; j_5 < 96; j_5++)\n            {\n                tmp_5[i_5 * 16 + k_5] += tmp_3[i_5 * 96 + j_5] * tmp_4[j_5 * 16 + k_5];\n            }\n        }\n    }\n    for (int i_5 = 0; i_5 < 512; i_5++)\n        result[i_5] = tmp_5[i_5];\n}"}
{"params":[["i_y_1536","float",1536],["i_y_4096","float",4096],["i_y_1024","float",1024],["result","float",1536]],"code":"void slow_performance(float *i_y_1536, float *i_y_4096, float *i_y_1024, float *result)\n{\n    float *tmp_1 = i_y_1536;\n    float *tmp_2 = i_y_4096;\n    float *tmp_3 = i_y_1024;\n    float tmp_4[64 * 16];\n    for (int i_4 = 0; i_4 < 64; i_4++)\n    {\n        for (int k_4 = 0; k_4 < 16; k_4++)\n        {\n            tmp_4[i_4 * 16 + k_4] = 0;\n            for (int j_4 = 0; j_4 < 64; j_4++)\n            {\n                tmp_4[i_4 * 16 + k_4] += tmp_2[i_4 * 64 + j_4] * tmp_3[j_4 * 16 + k_4];\n            }\n        }\n    }\n    float tmp_5[48 * 32];\n    for (int i_5 = 0; i_5 < 48; i_5++)\n    {\n        for (int k_5 = 0; k_5 < 32; k_5++)\n        {\n            tmp_5[i_5 * 32 + k_5] = 0;\n            for (int j_5 = 0; j_5 < 32; j_5++)\n            {\n                tmp_5[i_5 * 32 + k_5] += tmp_1[i_5 * 32 + j_5] * tmp_4[j_5 * 32 + k_5];\n            }\n        }\n    }\n    for (int i_5 = 0; i_5 < 1536; i_5++)\n        result[i_5] = tmp_5[i_5];\n}"}
