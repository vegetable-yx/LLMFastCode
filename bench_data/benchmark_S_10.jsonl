{"params":[["i_y_64","float",64],["i_x_32","float",32],["result","float",128]],"code":"void slow_performance(float *i_y_64, float *i_x_32, float *result)\n{\n    float *tmp_1 = i_y_64;\n    float tmp_2[2 * 32];\n    for (int i_2 = 0; i_2 < 2; i_2++)\n    {\n        for (int j_2 = 0; j_2 < 32; j_2++)\n        {\n            tmp_2[j_2 * 2 + i_2] = tmp_1[i_2 * 32 + j_2];\n        }\n    }\n    float *tmp_3 = i_x_32;\n    float tmp_4[16 * 8];\n    for (int i_4 = 0; i_4 < 16; i_4++)\n    {\n        for (int k_4 = 0; k_4 < 8; k_4++)\n        {\n            tmp_4[i_4 * 8 + k_4] = 0;\n            for (int j_4 = 0; j_4 < 4; j_4++)\n            {\n                tmp_4[i_4 * 8 + k_4] += tmp_2[i_4 * 4 + j_4] * tmp_3[j_4 * 8 + k_4];\n            }\n        }\n    }\n    for (int i_4 = 0; i_4 < 128; i_4++)\n        result[i_4] = tmp_4[i_4];\n}"}
{"params":[["i_x_32","float",32],["i_x_128","float",128],["result","float",16]],"code":"void slow_performance(float *i_x_32, float *i_x_128, float *result)\n{\n    float *tmp_1 = i_x_32;\n    float *tmp_2 = i_x_128;\n    float tmp_3[2 * 8];\n    for (int i_3 = 0; i_3 < 2; i_3++)\n    {\n        for (int k_3 = 0; k_3 < 8; k_3++)\n        {\n            tmp_3[i_3 * 8 + k_3] = 0;\n            for (int j_3 = 0; j_3 < 16; j_3++)\n            {\n                tmp_3[i_3 * 8 + k_3] += tmp_1[i_3 * 16 + j_3] * tmp_2[j_3 * 8 + k_3];\n            }\n        }\n    }\n    float tmp_4[1 * 16];\n    for (int i_4 = 0; i_4 < 1; i_4++)\n    {\n        for (int j_4 = 0; j_4 < 16; j_4++)\n        {\n            tmp_4[j_4 * 1 + i_4] = tmp_3[i_4 * 16 + j_4];\n        }\n    }\n    for (int i_4 = 0; i_4 < 16; i_4++)\n        result[i_4] = tmp_4[i_4];\n}"}
{"params":[["i_y_16","float",16],["result","float",64]],"code":"void slow_performance(float *i_y_16, float *result)\n{\n    float *tmp_1 = i_y_16;\n    float *tmp_2 = i_y_16;\n    float tmp_3[16 * 1];\n    for (int i_3 = 0; i_3 < 16; i_3++)\n    {\n        for (int j_3 = 0; j_3 < 1; j_3++)\n        {\n            tmp_3[i_3 * 1 + j_3] = tmp_1[i_3 * 1 + j_3] + tmp_2[i_3 * 1 + j_3];\n        }\n    }\n    float *tmp_4 = i_y_16;\n    float tmp_5[8 * 8];\n    for (int i_5 = 0; i_5 < 8; i_5++)\n    {\n        for (int k_5 = 0; k_5 < 8; k_5++)\n        {\n            tmp_5[i_5 * 8 + k_5] = 0;\n            for (int j_5 = 0; j_5 < 2; j_5++)\n            {\n                tmp_5[i_5 * 8 + k_5] += tmp_3[i_5 * 2 + j_5] * tmp_4[j_5 * 8 + k_5];\n            }\n        }\n    }\n    for (int i_5 = 0; i_5 < 64; i_5++)\n        result[i_5] = tmp_5[i_5];\n}"}
{"params":[["i_x_16","float",16],["i_x_64","float",64],["result","float",64]],"code":"void slow_performance(float *i_x_16, float *i_x_64, float *result)\n{\n    float *tmp_1 = i_x_16;\n    float *tmp_2 = i_x_16;\n    float tmp_3[2 * 8];\n    for (int i_3 = 0; i_3 < 2; i_3++)\n    {\n        for (int j_3 = 0; j_3 < 8; j_3++)\n        {\n            tmp_3[i_3 * 8 + j_3] = tmp_1[i_3 * 8 + j_3] + tmp_2[i_3 * 8 + j_3];\n        }\n    }\n    float *tmp_4 = i_x_64;\n    float tmp_5[4 * 16];\n    for (int i_5 = 0; i_5 < 4; i_5++)\n    {\n        for (int k_5 = 0; k_5 < 16; k_5++)\n        {\n            tmp_5[i_5 * 16 + k_5] = 0;\n            for (int j_5 = 0; j_5 < 4; j_5++)\n            {\n                tmp_5[i_5 * 16 + k_5] += tmp_3[i_5 * 4 + j_5] * tmp_4[j_5 * 16 + k_5];\n            }\n        }\n    }\n    for (int i_5 = 0; i_5 < 64; i_5++)\n        result[i_5] = tmp_5[i_5];\n}"}
{"params":[["i_y_16","float",16],["i_y_128","float",128],["result","float",32]],"code":"void slow_performance(float *i_y_16, float *i_y_128, float *result)\n{\n    float *tmp_1 = i_y_16;\n    float *tmp_2 = i_y_16;\n    float tmp_3[4 * 4];\n    for (int i_3 = 0; i_3 < 4; i_3++)\n    {\n        for (int j_3 = 0; j_3 < 4; j_3++)\n        {\n            tmp_3[i_3 * 4 + j_3] = tmp_1[i_3 * 4 + j_3] + tmp_2[i_3 * 4 + j_3];\n        }\n    }\n    float *tmp_4 = i_y_128;\n    float tmp_5[2 * 16];\n    for (int i_5 = 0; i_5 < 2; i_5++)\n    {\n        for (int k_5 = 0; k_5 < 16; k_5++)\n        {\n            tmp_5[i_5 * 16 + k_5] = 0;\n            for (int j_5 = 0; j_5 < 8; j_5++)\n            {\n                tmp_5[i_5 * 16 + k_5] += tmp_3[i_5 * 8 + j_5] * tmp_4[j_5 * 16 + k_5];\n            }\n        }\n    }\n    for (int i_5 = 0; i_5 < 32; i_5++)\n        result[i_5] = tmp_5[i_5];\n}"}
{"params":[["i_y_128","float",128],["i_x_64","float",64],["result","float",128]],"code":"void slow_performance(float *i_y_128, float *i_x_64, float *result)\n{\n    float *tmp_1 = i_y_128;\n    float *tmp_2 = i_y_128;\n    float *tmp_3 = i_x_64;\n    float tmp_4[16 * 8];\n    for (int i_4 = 0; i_4 < 16; i_4++)\n    {\n        for (int k_4 = 0; k_4 < 8; k_4++)\n        {\n            tmp_4[i_4 * 8 + k_4] = 0;\n            for (int j_4 = 0; j_4 < 8; j_4++)\n            {\n                tmp_4[i_4 * 8 + k_4] += tmp_2[i_4 * 8 + j_4] * tmp_3[j_4 * 8 + k_4];\n            }\n        }\n    }\n    float tmp_5[128 * 1];\n    for (int i_5 = 0; i_5 < 128; i_5++)\n    {\n        for (int j_5 = 0; j_5 < 1; j_5++)\n        {\n            tmp_5[i_5 * 1 + j_5] = tmp_1[i_5 * 1 + j_5] + tmp_4[i_5 * 1 + j_5];\n        }\n    }\n    for (int i_5 = 0; i_5 < 128; i_5++)\n        result[i_5] = tmp_5[i_5];\n}"}
{"params":[["i_x_128","float",128],["i_z_16","float",16],["i_x_32","float",32],["result","float",128]],"code":"void slow_performance(float *i_x_128, float *i_z_16, float *i_x_32, float *result)\n{\n    float *tmp_1 = i_x_128;\n    float *tmp_2 = i_z_16;\n    float *tmp_3 = i_x_32;\n    float tmp_4[8 * 16];\n    for (int i_4 = 0; i_4 < 8; i_4++)\n    {\n        for (int k_4 = 0; k_4 < 16; k_4++)\n        {\n            tmp_4[i_4 * 16 + k_4] = 0;\n            for (int j_4 = 0; j_4 < 2; j_4++)\n            {\n                tmp_4[i_4 * 16 + k_4] += tmp_2[i_4 * 2 + j_4] * tmp_3[j_4 * 16 + k_4];\n            }\n        }\n    }\n    float tmp_5[16 * 8];\n    for (int i_5 = 0; i_5 < 16; i_5++)\n    {\n        for (int j_5 = 0; j_5 < 8; j_5++)\n        {\n            tmp_5[i_5 * 8 + j_5] = tmp_1[i_5 * 8 + j_5] + tmp_4[i_5 * 8 + j_5];\n        }\n    }\n    for (int i_5 = 0; i_5 < 128; i_5++)\n        result[i_5] = tmp_5[i_5];\n}"}
{"params":[["i_x_64","float",64],["i_x_128","float",128],["result","float",128]],"code":"void slow_performance(float *i_x_64, float *i_x_128, float *result)\n{\n    float *tmp_1 = i_x_64;\n    float *tmp_2 = i_x_64;\n    float *tmp_3 = i_x_128;\n    float tmp_4[4 * 8];\n    for (int i_4 = 0; i_4 < 4; i_4++)\n    {\n        for (int k_4 = 0; k_4 < 8; k_4++)\n        {\n            tmp_4[i_4 * 8 + k_4] = 0;\n            for (int j_4 = 0; j_4 < 16; j_4++)\n            {\n                tmp_4[i_4 * 8 + k_4] += tmp_2[i_4 * 16 + j_4] * tmp_3[j_4 * 8 + k_4];\n            }\n        }\n    }\n    float tmp_5[16 * 8];\n    for (int i_5 = 0; i_5 < 16; i_5++)\n    {\n        for (int k_5 = 0; k_5 < 8; k_5++)\n        {\n            tmp_5[i_5 * 8 + k_5] = 0;\n            for (int j_5 = 0; j_5 < 4; j_5++)\n            {\n                tmp_5[i_5 * 8 + k_5] += tmp_1[i_5 * 4 + j_5] * tmp_4[j_5 * 8 + k_5];\n            }\n        }\n    }\n    for (int i_5 = 0; i_5 < 128; i_5++)\n        result[i_5] = tmp_5[i_5];\n}"}
{"params":[["i_z_32","float",32],["i_z_128","float",128],["result","float",128]],"code":"void slow_performance(float *i_z_32, float *i_z_128, float *result)\n{\n    float *tmp_1 = i_z_32;\n    float *tmp_2 = i_z_128;\n    float *tmp_3 = i_z_32;\n    float tmp_4[8 * 2];\n    for (int i_4 = 0; i_4 < 8; i_4++)\n    {\n        for (int k_4 = 0; k_4 < 2; k_4++)\n        {\n            tmp_4[i_4 * 2 + k_4] = 0;\n            for (int j_4 = 0; j_4 < 16; j_4++)\n            {\n                tmp_4[i_4 * 2 + k_4] += tmp_2[i_4 * 16 + j_4] * tmp_3[j_4 * 2 + k_4];\n            }\n        }\n    }\n    float tmp_5[16 * 8];\n    for (int i_5 = 0; i_5 < 16; i_5++)\n    {\n        for (int k_5 = 0; k_5 < 8; k_5++)\n        {\n            tmp_5[i_5 * 8 + k_5] = 0;\n            for (int j_5 = 0; j_5 < 2; j_5++)\n            {\n                tmp_5[i_5 * 8 + k_5] += tmp_1[i_5 * 2 + j_5] * tmp_4[j_5 * 8 + k_5];\n            }\n        }\n    }\n    for (int i_5 = 0; i_5 < 128; i_5++)\n        result[i_5] = tmp_5[i_5];\n}"}
{"params":[["i_x_64","float",64],["i_y_32","float",32],["result","float",32]],"code":"void slow_performance(float *i_x_64, float *i_y_32, float *result)\n{\n    float *tmp_1 = i_x_64;\n    float *tmp_2 = i_y_32;\n    float *tmp_3 = i_x_64;\n    float tmp_4[8 * 16];\n    for (int i_4 = 0; i_4 < 8; i_4++)\n    {\n        for (int k_4 = 0; k_4 < 16; k_4++)\n        {\n            tmp_4[i_4 * 16 + k_4] = 0;\n            for (int j_4 = 0; j_4 < 4; j_4++)\n            {\n                tmp_4[i_4 * 16 + k_4] += tmp_2[i_4 * 4 + j_4] * tmp_3[j_4 * 16 + k_4];\n            }\n        }\n    }\n    float tmp_5[4 * 8];\n    for (int i_5 = 0; i_5 < 4; i_5++)\n    {\n        for (int k_5 = 0; k_5 < 8; k_5++)\n        {\n            tmp_5[i_5 * 8 + k_5] = 0;\n            for (int j_5 = 0; j_5 < 16; j_5++)\n            {\n                tmp_5[i_5 * 8 + k_5] += tmp_1[i_5 * 16 + j_5] * tmp_4[j_5 * 8 + k_5];\n            }\n        }\n    }\n    for (int i_5 = 0; i_5 < 32; i_5++)\n        result[i_5] = tmp_5[i_5];\n}"}
