Rewrite `slow_performance` into `max_performance`, keeping inputs, outputs, and behavior identical with allowable total squared precision error of 1e-3.  
Only apply performance optimizations (algebraic simplification, cache-friendly memory access, SIMD/AVX-2, loop unrolling, etc.).  

**Assume the code executes on a single core, DO NOT introduce multithreading or parallelism.**

**Target system**
- Intel(R) Core(TM) Ultra 7 265K CPU @ 3.90GHz
- Caches: 240 KB L1 D + 32 KB L1 I per core, 3.00 MB L2 per core, 30 MB shared L3  
- GCC 12 on Debian Bookworm; compile with `-O3 -march=native -mavx2 -std=c++11`

**Hints**
- Write SIMDe code with <immintrin.h> whenever possible.
- Do not use libc functions as their performance is not good.

Return **only** the full, ready-to-compile `max_performance` functionâ€”no other text, comments, or explanations.


```
#include <immintrin.h>
#include "common.h"

void slow_performance(double *__restrict x, double *__restrict y, double *__restrict z)
{
    for (int i = 0; i < 32; ++i) {
        z[i] = 0.0;
    }

    for (int i = 0; i < 4; ++i) {
        for (int j = 0; j < 4; ++j) {
            double real = 0.0;
            double imag = 0.0;
            for (int k = 0; k < 4; ++k) {
                double a = x[(i * 4 + k) * 2];
                double b = x[(i * 4 + k) * 2 + 1];

                double c = y[(k * 4 + j) * 2];
                double d = y[(k * 4 + j) * 2 + 1];

                double prod_real = 2.0 * a * c - b * d;
                double prod_imag = 2.0 * b * c + 2.0 * a * d;

                real += prod_real;
                imag += prod_imag;
            }

            z[(i * 4 + j) * 2] = real;
            z[(i * 4 + j) * 2 + 1] = imag;
        }
    }
}

void slow_performance(double *__restrict x, double *__restrict y, double *__restrict z)
{
}
```


================================
```c
#include <immintrin.h>
#include "common.h"

void max_performance(double *__restrict x, double *__restrict y, double *__restrict z)
{
    __m256d zero = _mm256_set1_pd(0.0);
    for (int i = 0; i < 4; ++i) {
        for (int k = 0; k < 32; k += 8) {
            __m256d xa1 = _mm256_loadu_pd(&x[(i * 4 + k) * 2]);
            __m256d xb1 = _mm256_loadu_pd(&x[(i * 4 + k) * 2 + 1]);
            for (int j = 0; j < 4; ++j) {
                __m256d ya1 = _mm256_loadu_pd(&y[(k * 4 + j) * 2]);
                __m256d yb1 = _mm256_loadu_pd(&y[(k * 4 + j) * 2 + 1]);

                __m256d prod_real1 = _mm256_fmadd_pd(xa1, _mm256_mul_pd(_mm256_set1_pd(2.0), ya1), _mm256_fmadd_pd(xb1, yb1, zero));
                __m256d prod_imag1 = _mm256_fmadd_pd(xb1, _mm256_mul_pd(_mm256_set1_pd(2.0), ya1), _mm256_fmadd_pd(xa1, _mm256_mul_pd(_mm256_set1_pd(2.0), yb1), zero));

                __m256d real = _mm256_loadu_pd(&z[(i * 4 + j) * 2]);
                __m256d imag = _mm256_loadu_pd(&z[(i * 4 + j) * 2 + 1]);

                real = _mm256_add_pd(real, prod_real1);
                imag = _mm256_add_pd(imag, prod_imag1);

                _mm256_storeu_pd(&z[(i * 4 + j) * 2], real);
                _mm256_storeu_pd(&z[(i * 4 + j) * 2 + 1], imag);
            }
        }
    }
}
```
>>>
Starting program. 2 functions registered.
The result of the 2th function is not correct.

Running: slow_performance
54.7895 cycles
Segmentation fault
<<<
WA
================================
```c
#include <immintrin.h>
#include "common.h"

void max_performance(double *__restrict x, double *__restrict y, double *__restrict z) {
    __m256d zero = _mm256_set1_pd(0.0);
    for (int i = 0; i < 32 / 4; ++i) {
        _mm256_storeu_pd(z + i * 4, zero);
    }
    
    for (int i = 0; i < 4; ++i) {
        for (int j = 0; j < 4; ++j) {
            __m256d real = zero;
            __m256d imag = zero;
            for (int k = 0; k < 4; k++) {
                __m256d a = _mm256_loadu_pd(x + (i * 4 + k) * 2);
                __m256d b = _mm256_loadu_pd(x + (i * 4 + k) * 2 + 2);
                __m256d c = _mm256_loadu_pd(y + (k * 4 + j) * 2);
                __m256d d = _mm256_loadu_pd(y + (k * 4 + j) * 2 + 2);
                
                __m256d a2 = _mm256_mul_pd(a, _mm256_set1_pd(2.0));
                __m256d prod_real = _mm256_sub_pd(_mm256_mul_pd(a2, c), _mm256_mul_pd(b, d));
                __m256d prod_imag = _mm256_add_pd(_mm256_mul_pd(b, _mm256_mul_pd(c, _mm256_set1_pd(2.0))),
                                                   _mm256_mul_pd(a2, d));
                real = _mm256_add_pd(real, prod_real);
                imag = _mm256_add_pd(imag, prod_imag);
            }
            _mm256_storeu_pd(z + (i * 4 + j) * 2, real);
            _mm256_storeu_pd(z + (i * 4 + j) * 2 + 2, imag);
        }
    }
}
```
>>>
Starting program. 2 functions registered.
The result of the 2th function is not correct.

Running: slow_performance
55.1082 cycles
Segmentation fault
<<<
WA
================================
```
#include <immintrin.h>
#include "common.h"

void max_performance(double *__restrict x, double *__restrict y, double *__restrict z) {
    __m256d zero = _mm256_set1_pd(0.0);
    for (int i = 0; i < 4; ++i) {
        for (int j = 0; j < 4; ++j) {
            __m256d real = zero;
            __m256d imag = zero;
            for (int k = 0; k < 4; ++k) {
                __m256d a = _mm256_loadu_pd(x + (i * 4 + k) * 2);
                __m256d b = _mm256_loadu_pd(x + (i * 4 + k) * 2 + 2);
                __m256d c = _mm256_loadu_pd(y + (k * 4 + j) * 2);
                __m256d d = _mm256_loadu_pd(y + (k * 4 + j) * 2 + 2);

                __m256d prod_real = _mm256_sub_pd(_mm256_mul_pd(_mm256_set1_pd(2.0), _mm256_mul_pd(a, c)), _mm256_mul_pd(b, d));
                __m256d prod_imag = _mm256_add_pd(_mm256_mul_pd(_mm256_set1_pd(2.0), _mm256_mul_pd(b, c)), _mm256_mul_pd(_mm256_set1_pd(2.0), _mm256_mul_pd(a, d)));

                real = _mm256_add_pd(real, prod_real);
                imag = _mm256_add_pd(imag, prod_imag);
            }
            _mm256_storeu_pd(z + (i * 4 + j) * 2, real);
            _mm256_storeu_pd(z + (i * 4 + j) * 2 + 2, imag);
        }
    }
}
```
>>>
Starting program. 2 functions registered.
The result of the 2th function is not correct.

Running: slow_performance
55.0434 cycles
Segmentation fault
<<<
WA
================================