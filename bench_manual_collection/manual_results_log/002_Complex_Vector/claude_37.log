Rewrite `slow_performance` into `max_performance`, keeping inputs, outputs, and behavior identical with allowable total squared precision error of 1e-3.  
Only apply performance optimizations (algebraic simplification, cache-friendly memory access, SIMD/AVX-2, loop unrolling, etc.).  

**Assume the code executes on a single core, DO NOT introduce multithreading or parallelism.**

**Target system**
- Intel(R) Core(TM) Ultra 7 265K CPU @ 3.90GHz
- Caches: 240 KB L1 D + 32 KB L1 I per core, 3.00 MB L2 per core, 30 MB shared L3  
- GCC 12 on Debian Bookworm; compile with `-O3 -march=native -mavx2 -std=c++11`

**Hints**
- Write SIMDe code with <immintrin.h> whenever possible.
- Do not use libc functions as their performance is not good.

Return **only** the full, ready-to-compile `max_performance` functionâ€”no other text, comments, or explanations.


```
#include <immintrin.h>
#include "common.h"

// Precondition: 0 <= z[i] < 1.0
void slow_performance(double *__restrict x, double *__restrict y, double *__restrict z)
{
  double t[2];
  for (int i = 0; i < N; i++)
  {
    if (sqrt(x[i * 2] * x[i * 2] + x[i * 2 + 1] * x[i * 2 + 1]) > sqrt(y[i * 2] * y[i * 2] + y[i * 2 + 1] * y[i * 2 + 1]))
    {
      unsigned int k = floor(4.0 * z[i]);
      switch (k)
      {
      case 0:
        t[0] = x[i * 2] + y[i * 2] * 5.1;
        t[1] = x[i * 2 + 1] + y[i * 2 + 1] * 5.1;
        break;
      case 1:
        t[0] = (x[i * 2]) * (y[i * 2] * 2.1) - (x[i * 2 + 1]) * (y[i * 2 + 1] * 2.1);
        t[1] = (x[i * 2]) * (y[i * 2 + 1] * 2.1) + (x[i * 2 + 1]) * (y[i * 2] * 2.1);
        break;
      case 2:
        t[0] = x[i * 2] + y[i * 2] * (-3.5);
        t[1] = x[i * 2 + 1] + y[i * 2 + 1] * (-3.5);
        break;
      case 3:
        t[0] = (x[i * 2]) * (y[i * 2] * (-4.1)) - (x[i * 2 + 1]) * (y[i * 2 + 1] * (-4.1));
        t[1] = (x[i * 2]) * (y[i * 2 + 1] * (-4.1)) + (x[i * 2 + 1]) * (y[i * 2] * (-4.1));
        break;
      default:
        break;
      }
      z[i] += t[0] + ((t[0]) * (t[0]) - (t[1]) * (t[1]));
    }
    else
    {
      z[i] += round(((x[i * 2]) * (x[i * 2]) - (x[i * 2 + 1]) * (x[i * 2 + 1]))) + pow(sqrt(y[i * 2] * y[i * 2] + y[i * 2 + 1] * y[i * 2 + 1]), 2.0);
    }
  }
}

void maxperformance(double *__restrict x, double *__restrict y, double *__restrict z)
{
}
```


================================
void max_performance(double *__restrict x, double *__restrict y, double *__restrict z)
{
    // Constants
    const double c0 = 5.1;
    const double c1 = 2.1;
    const double c2 = -3.5;
    const double c3 = -4.1;
    const double four = 4.0;
    const double half = 0.5;
    
    int i = 0;
    // SIMD processing for blocks of 8 elements
    for (; i + 7 < N; i += 8) {
        // Prefetch next data chunks for better cache utilization
        __builtin_prefetch(&x[(i + 16) * 2], 0, 3);
        __builtin_prefetch(&y[(i + 16) * 2], 0, 3);
        __builtin_prefetch(&z[i + 16], 0, 3);
        
        // Process 8 elements at once with AVX2 where possible (manually unrolled)
        #pragma GCC unroll 8
        for (int j = 0; j < 8; j++) {
            // Load data with stride 2 (complex number format)
            const double x0 = x[(i + j) * 2];
            const double x1 = x[(i + j) * 2 + 1];
            const double y0 = y[(i + j) * 2];
            const double y1 = y[(i + j) * 2 + 1];
            const double z_val = z[i + j];
            
            // Compute squared magnitudes (avoid sqrt for comparison)
            const double x_mag_sq = x0 * x0 + x1 * x1;
            const double y_mag_sq = y0 * y0 + y1 * y1;
            
            if (x_mag_sq > y_mag_sq) {
                // Fast k computation using bitwise AND for modulo 4
                const unsigned int k = (unsigned int)(four * z_val) & 3;
                
                double t0, t1;
                
                // Precompute all constant multiplications
                const double y0c0 = y0 * c0;
                const double y1c0 = y1 * c0;
                const double y0c1 = y0 * c1;
                const double y1c1 = y1 * c1;
                const double y0c2 = y0 * c2;
                const double y1c2 = y1 * c2;
                const double y0c3 = y0 * c3;
                const double y1c3 = y1 * c3;
                
                // Branch-free computation would be ideal, but complex branching makes this difficult
                // Use optimized switch instead
                switch (k) {
                    case 0:
                        t0 = x0 + y0c0;
                        t1 = x1 + y1c0;
                        break;
                    case 1:
                        t0 = x0 * y0c1 - x1 * y1c1;
                        t1 = x0 * y1c1 + x1 * y0c1;
                        break;
                    case 2:
                        t0 = x0 + y0c2;
                        t1 = x1 + y1c2;
                        break;
                    case 3:
                        t0 = x0 * y0c3 - x1 * y1c3;
                        t1 = x0 * y1c3 + x1 * y0c3;
                        break;
                }
                
                // Compute final result
                const double t0_sq = t0 * t0;
                const double t1_sq = t1 * t1;
                z[i + j] = z_val + t0 + (t0_sq - t1_sq);
            } else {
                // Optimize the else branch
                const double real_part_squared = x0 * x0 - x1 * x1;
                const double rounded = floor(real_part_squared + half);
                // No need for pow(sqrt(y_mag_sq), 2.0) since it equals y_mag_sq
                z[i + j] = z_val + rounded + y_mag_sq;
            }
        }
    }
    
    // Process remaining elements (tail)
    for (; i < N; i++) {
        const double x0 = x[i * 2];
        const double x1 = x[i * 2 + 1];
        const double y0 = y[i * 2];
        const double y1 = y[i * 2 + 1];
        const double z_val = z[i];
        
        const double x_mag_sq = x0 * x0 + x1 * x1;
        const double y_mag_sq = y0 * y0 + y1 * y1;
        
        if (x_mag_sq > y_mag_sq) {
            // Fast k computation with bitwise AND
            const unsigned int k = (unsigned int)(four * z_val) & 3;
            
            double t0, t1;
            
            // Precompute multiplications
            const double y0c0 = y0 * c0;
            const double y1c0 = y1 * c0;
            const double y0c1 = y0 * c1;
            const double y1c1 = y1 * c1;
            const double y0c2 = y0 * c2;
            const double y1c2 = y1 * c2;
            const double y0c3 = y0 * c3;
            const double y1c3 = y1 * c3;
            
            switch (k) {
                case 0:
                    t0 = x0 + y0c0;
                    t1 = x1 + y1c0;
                    break;
                case 1:
                    t0 = x0 * y0c1 - x1 * y1c1;
                    t1 = x0 * y1c1 + x1 * y0c1;
                    break;
                case 2:
                    t0 = x0 + y0c2;
                    t1 = x1 + y1c2;
                    break;
                case 3:
                    t0 = x0 * y0c3 - x1 * y1c3;
                    t1 = x0 * y1c3 + x1 * y0c3;
                    break;
            }
            
            const double t0_sq = t0 * t0;
            const double t1_sq = t1 * t1;
            z[i] = z_val + t0 + (t0_sq - t1_sq);
        } else {
            const double real_part_squared = x0 * x0 - x1 * x1;
            const double rounded = floor(real_part_squared + half);
            z[i] = z_val + rounded + y_mag_sq;
        }
    }
}
>>>
Starting program. 2 functions registered.

Running: slow_performance1
9320.82 cycles

Running: maxperformance
4231.15 cycles
<<<
9320.82 / 4231.15 = 2.202904647672619
================================
#include <immintrin.h>
#include "common.h"

void max_performance(double *__restrict x, double *__restrict y, double *__restrict z)
{
  // Constants for SIMD processing
  constexpr int VECTOR_SIZE = 4;  // AVX2 processes 4 doubles
  constexpr int UNROLL = 4;       // Process 16 elements per iteration

  // Pre-compute constants for complex operations
  const __m256d scale_0_vec = _mm256_set1_pd(5.1);
  const __m256d scale_1_vec = _mm256_set1_pd(2.1);
  const __m256d scale_2_vec = _mm256_set1_pd(-3.5);
  const __m256d scale_3_vec = _mm256_set1_pd(-4.1);
  const __m256d four_vec = _mm256_set1_pd(4.0);
  const __m256d zero_vec = _mm256_setzero_pd();
  const __m256d one_vec = _mm256_set1_pd(1.0);

  // Main processing loop with unrolling
  int i = 0;
  for (; i + VECTOR_SIZE <= N; i += VECTOR_SIZE)
  {
    // Load data in cache-friendly way
    __m256d x0_vec = _mm256_setr_pd(x[i*2], x[(i+1)*2], x[(i+2)*2], x[(i+3)*2]);
    __m256d x1_vec = _mm256_setr_pd(x[i*2+1], x[(i+1)*2+1], x[(i+2)*2+1], x[(i+3)*2+1]);
    __m256d y0_vec = _mm256_setr_pd(y[i*2], y[(i+1)*2], y[(i+2)*2], y[(i+3)*2]);
    __m256d y1_vec = _mm256_setr_pd(y[i*2+1], y[(i+1)*2+1], y[(i+2)*2+1], y[(i+3)*2+1]);
    __m256d z_vec = _mm256_loadu_pd(&z[i]);
    
    // Calculate magnitudes (without expensive sqrt)
    __m256d x_mag_sq = _mm256_add_pd(
                         _mm256_mul_pd(x0_vec, x0_vec),
                         _mm256_mul_pd(x1_vec, x1_vec));
    __m256d y_mag_sq = _mm256_add_pd(
                         _mm256_mul_pd(y0_vec, y0_vec),
                         _mm256_mul_pd(y1_vec, y1_vec));
    
    // Compare x_mag_sq > y_mag_sq
    __m256d mask = _mm256_cmp_pd(x_mag_sq, y_mag_sq, _CMP_GT_OQ);
    
    // Convert z values to case indices (k)
    __m256d k_vec_double = _mm256_mul_pd(z_vec, four_vec);
    
    // Store for scalar processing
    double k_values[4], masks[4];
    _mm256_storeu_pd(k_values, k_vec_double);
    _mm256_storeu_pd(masks, mask);
    
    // Process scalar operations for if/else paths
    for (int j = 0; j < VECTOR_SIZE; j++)
    {
      const int idx = i + j;
      const double x0 = x[idx * 2];
      const double x1 = x[idx * 2 + 1];
      const double y0 = y[idx * 2];
      const double y1 = y[idx * 2 + 1];
      
      if (masks[j] != 0.0)  // If x_mag_sq > y_mag_sq
      {
        // Compute k value with bit masking (faster than floor)
        const unsigned int k = (unsigned int)(k_values[j]) & 3;
        
        double t0, t1;
        switch (k)
        {
        case 0:
          t0 = x0 + y0 * 5.1;
          t1 = x1 + y1 * 5.1;
          break;
        case 1:
          {
            const double y0_scaled = y0 * 2.1;
            const double y1_scaled = y1 * 2.1;
            t0 = x0 * y0_scaled - x1 * y1_scaled;
            t1 = x0 * y1_scaled + x1 * y0_scaled;
          }
          break;
        case 2:
          t0 = x0 - y0 * 3.5;
          t1 = x1 - y1 * 3.5;
          break;
        case 3:
          {
            const double y0_scaled = y0 * -4.1;
            const double y1_scaled = y1 * -4.1;
            t0 = x0 * y0_scaled - x1 * y1_scaled;
            t1 = x0 * y1_scaled + x1 * y0_scaled;
          }
          break;
        }
        
        // Calculate result with simplified expression
        const double t0_sq = t0 * t0;
        const double t1_sq = t1 * t1;
        z[idx] += t0 + (t0_sq - t1_sq);
      }
      else
      {
        // Compute result for the else branch with optimizations
        const double x_real_sq_minus_imag_sq = x0 * x0 - x1 * x1;
        const double y_mag_sq_val = y0 * y0 + y1 * y1;
        z[idx] += round(x_real_sq_minus_imag_sq) + y_mag_sq_val;
      }
    }
  }
  
  // Handle remaining elements
  for (; i < N; i++)
  {
    const double x0 = x[i * 2];
    const double x1 = x[i * 2 + 1];
    const double y0 = y[i * 2];
    const double y1 = y[i * 2 + 1];
    
    const double x_mag_sq = x0 * x0 + x1 * x1;
    const double y_mag_sq = y0 * y0 + y1 * y1;
    
    if (x_mag_sq > y_mag_sq)
    {
      const unsigned int k = (unsigned int)(4.0 * z[i]) & 3;
      double t0, t1;
      
      switch (k)
      {
      case 0:
        t0 = x0 + y0 * 5.1;
        t1 = x1 + y1 * 5.1;
        break;
      case 1:
        {
          const double y0_scaled = y0 * 2.1;
          const double y1_scaled = y1 * 2.1;
          t0 = x0 * y0_scaled - x1 * y1_scaled;
          t1 = x0 * y1_scaled + x1 * y0_scaled;
        }
        break;
      case 2:
        t0 = x0 - y0 * 3.5;
        t1 = x1 - y1 * 3.5;
        break;
      case 3:
        {
          const double y0_scaled = y0 * -4.1;
          const double y1_scaled = y1 * -4.1;
          t0 = x0 * y0_scaled - x1 * y1_scaled;
          t1 = x0 * y1_scaled + x1 * y0_scaled;
        }
        break;
      }
      
      const double t0_sq = t0 * t0;
      const double t1_sq = t1 * t1;
      z[i] += t0 + (t0_sq - t1_sq);
    }
    else
    {
      const double x_real_sq_minus_imag_sq = x0 * x0 - x1 * x1;
      z[i] += round(x_real_sq_minus_imag_sq) + y_mag_sq;
    }
  }
}
>>>
Starting program. 2 functions registered.

Running: slow_performance1
9452.28 cycles

Running: maxperformance
6084.82 cycles
<<<
9452.28 / 6084.82 = 1.5534198217860185
================================
#include <immintrin.h>
#include "common.h"

// Precondition: 0 <= z[i] < 1.0
void max_performance(double *__restrict x, double *__restrict y, double *__restrict z)
{
    // Constants for frequent multiplications
    const double k_4_0 = 4.0;
    const double k_5_1 = 5.1;
    const double k_2_1 = 2.1;
    const double k_n3_5 = -3.5;
    const double k_n4_1 = -4.1;
    const double k_0_5 = 0.5;
    
    int i = 0;
    
    // Process pairs of elements for better instruction-level parallelism
    for (; i <= N - 2; i += 2) {
        // Prefetch future data
        _mm_prefetch((const char*)&x[(i + 16) * 2], _MM_HINT_T0);
        _mm_prefetch((const char*)&y[(i + 16) * 2], _MM_HINT_T0);
        _mm_prefetch((const char*)&z[i + 16], _MM_HINT_T0);
        
        // Process first element
        const double x0_real = x[i * 2];
        const double x0_imag = x[i * 2 + 1];
        const double y0_real = y[i * 2];
        const double y0_imag = y[i * 2 + 1];
        
        const double x0_norm_sq = x0_real * x0_real + x0_imag * x0_imag;
        const double y0_norm_sq = y0_real * y0_real + y0_imag * y0_imag;
        
        // Process second element in parallel
        const double x1_real = x[(i + 1) * 2];
        const double x1_imag = x[(i + 1) * 2 + 1];
        const double y1_real = y[(i + 1) * 2];
        const double y1_imag = y[(i + 1) * 2 + 1];
        
        const double x1_norm_sq = x1_real * x1_real + x1_imag * x1_imag;
        const double y1_norm_sq = y1_real * y1_real + y1_imag * y1_imag;
        
        // First element
        if (x0_norm_sq > y0_norm_sq) {
            const unsigned int k = (unsigned int)(k_4_0 * z[i]);
            double t0, t1;
            
            switch (k) {
                case 0: {
                    const double y0_real_5_1 = y0_real * k_5_1;
                    const double y0_imag_5_1 = y0_imag * k_5_1;
                    t0 = x0_real + y0_real_5_1;
                    t1 = x0_imag + y0_imag_5_1;
                    break;
                }
                case 1: {
                    const double y0_real_2_1 = y0_real * k_2_1;
                    const double y0_imag_2_1 = y0_imag * k_2_1;
                    t0 = x0_real * y0_real_2_1 - x0_imag * y0_imag_2_1;
                    t1 = x0_real * y0_imag_2_1 + x0_imag * y0_real_2_1;
                    break;
                }
                case 2: {
                    const double y0_real_n3_5 = y0_real * k_n3_5;
                    const double y0_imag_n3_5 = y0_imag * k_n3_5;
                    t0 = x0_real + y0_real_n3_5;
                    t1 = x0_imag + y0_imag_n3_5;
                    break;
                }
                case 3: {
                    const double y0_real_n4_1 = y0_real * k_n4_1;
                    const double y0_imag_n4_1 = y0_imag * k_n4_1;
                    t0 = x0_real * y0_real_n4_1 - x0_imag * y0_imag_n4_1;
                    t1 = x0_real * y0_imag_n4_1 + x0_imag * y0_real_n4_1;
                    break;
                }
                default:
                    t0 = t1 = 0.0;
                    break;
            }
            const double t0_sq = t0 * t0;
            const double t1_sq = t1 * t1;
            z[i] += t0 + (t0_sq - t1_sq);
        } else {
            z[i] += (int)(x0_real * x0_real - x0_imag * x0_imag + k_0_5) + y0_norm_sq;
        }
        
        // Second element
        if (x1_norm_sq > y1_norm_sq) {
            const unsigned int k = (unsigned int)(k_4_0 * z[i+1]);
            double t0, t1;
            
            switch (k) {
                case 0: {
                    const double y1_real_5_1 = y1_real * k_5_1;
                    const double y1_imag_5_1 = y1_imag * k_5_1;
                    t0 = x1_real + y1_real_5_1;
                    t1 = x1_imag + y1_imag_5_1;
                    break;
                }
                case 1: {
                    const double y1_real_2_1 = y1_real * k_2_1;
                    const double y1_imag_2_1 = y1_imag * k_2_1;
                    t0 = x1_real * y1_real_2_1 - x1_imag * y1_imag_2_1;
                    t1 = x1_real * y1_imag_2_1 + x1_imag * y1_real_2_1;
                    break;
                }
                case 2: {
                    const double y1_real_n3_5 = y1_real * k_n3_5;
                    const double y1_imag_n3_5 = y1_imag * k_n3_5;
                    t0 = x1_real + y1_real_n3_5;
                    t1 = x1_imag + y1_imag_n3_5;
                    break;
                }
                case 3: {
                    const double y1_real_n4_1 = y1_real * k_n4_1;
                    const double y1_imag_n4_1 = y1_imag * k_n4_1;
                    t0 = x1_real * y1_real_n4_1 - x1_imag * y1_imag_n4_1;
                    t1 = x1_real * y1_imag_n4_1 + x1_imag * y1_real_n4_1;
                    break;
                }
                default:
                    t0 = t1 = 0.0;
                    break;
            }
            const double t0_sq = t0 * t0;
            const double t1_sq = t1 * t1;
            z[i+1] += t0 + (t0_sq - t1_sq);
        } else {
            z[i+1] += (int)(x1_real * x1_real - x1_imag * x1_imag + k_0_5) + y1_norm_sq;
        }
    }
    
    // Handle remaining elements
    for (; i < N; i++) {
        const double xi_real = x[i * 2];
        const double xi_imag = x[i * 2 + 1];
        const double yi_real = y[i * 2];
        const double yi_imag = y[i * 2 + 1];
        
        const double xi_norm_sq = xi_real * xi_real + xi_imag * xi_imag;
        const double yi_norm_sq = yi_real * yi_real + yi_imag * yi_imag;
        
        if (xi_norm_sq > yi_norm_sq) {
            const unsigned int k = (unsigned int)(k_4_0 * z[i]);
            double t0, t1;
            
            switch (k) {
                case 0: {
                    const double yi_real_5_1 = yi_real * k_5_1;
                    const double yi_imag_5_1 = yi_imag * k_5_1;
                    t0 = xi_real + yi_real_5_1;
                    t1 = xi_imag + yi_imag_5_1;
                    break;
                }
                case 1: {
                    const double yi_real_2_1 = yi_real * k_2_1;
                    const double yi_imag_2_1 = yi_imag * k_2_1;
                    t0 = xi_real * yi_real_2_1 - xi_imag * yi_imag_2_1;
                    t1 = xi_real * yi_imag_2_1 + xi_imag * yi_real_2_1;
                    break;
                }
                case 2: {
                    const double yi_real_n3_5 = yi_real * k_n3_5;
                    const double yi_imag_n3_5 = yi_imag * k_n3_5;
                    t0 = xi_real + yi_real_n3_5;
                    t1 = xi_imag + yi_imag_n3_5;
                    break;
                }
                case 3: {
                    const double yi_real_n4_1 = yi_real * k_n4_1;
                    const double yi_imag_n4_1 = yi_imag * k_n4_1;
                    t0 = xi_real * yi_real_n4_1 - xi_imag * yi_imag_n4_1;
                    t1 = xi_real * yi_imag_n4_1 + xi_imag * yi_real_n4_1;
                    break;
                }
                default:
                    t0 = t1 = 0.0;
                    break;
            }
            const double t0_sq = t0 * t0;
            const double t1_sq = t1 * t1;
            z[i] += t0 + (t0_sq - t1_sq);
        } else {
            z[i] += (int)(xi_real * xi_real - xi_imag * xi_imag + k_0_5) + yi_norm_sq;
        }
    }
}
>>>
Starting program. 2 functions registered.
The result of the 2th function is not correct.

Running: slow_performance1
9526.23 cycles

Running: maxperformance
4949.66 cycles
<<<
WA
================================