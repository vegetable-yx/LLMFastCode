Rewrite `slow_performance` into `max_performance`, keeping inputs, outputs, and behavior identical with allowable total squared precision error of 1e-3.  
Only apply performance optimizations (algebraic simplification, cache-friendly memory access, SIMD/AVX-2, loop unrolling, etc.).  

**Assume the code executes on a single core, DO NOT introduce multithreading or parallelism.**

**Target system**
- Intel(R) Core(TM) Ultra 7 265K CPU @ 3.90GHz
- Caches: 240 KB L1 D + 32 KB L1 I per core, 3.00 MB L2 per core, 30 MB shared L3  
- GCC 12 on Debian Bookworm; compile with `-O3 -march=native -mavx2 -std=c++11`

**Hints**
- Write SIMDe code with <immintrin.h> whenever possible.
- Do not use libc functions as their performance is not good.

Return **only** the full, ready-to-compile `max_performance` functionâ€”no other text, comments, or explanations.


```
#include <immintrin.h>
#include "common.h"

void slow_performance(double *__restrict x, double *__restrict y, double *__restrict z)
{
    for (int i = 0; i < 32; ++i) {
        z[i] = 0.0;
    }

    for (int i = 0; i < 4; ++i) {
        for (int j = 0; j < 4; ++j) {
            double real = 0.0;
            double imag = 0.0;
            for (int k = 0; k < 4; ++k) {
                double a = x[(i * 4 + k) * 2];
                double b = x[(i * 4 + k) * 2 + 1];

                double c = y[(k * 4 + j) * 2];
                double d = y[(k * 4 + j) * 2 + 1];

                double prod_real = 2.0 * a * c - b * d;
                double prod_imag = 2.0 * b * c + 2.0 * a * d;

                real += prod_real;
                imag += prod_imag;
            }

            z[(i * 4 + j) * 2] = real;
            z[(i * 4 + j) * 2 + 1] = imag;
        }
    }
}

void slow_performance(double *__restrict x, double *__restrict y, double *__restrict z)
{
}
```


================================
#include <immintrin.h>
#include "common.h"

void max_performance(double *__restrict x, double *__restrict y, double *__restrict z)
{
    __m256d zero = _mm256_setzero_pd();
    for (int i = 0; i < 8; ++i) {
        _mm256_storeu_pd(z + i * 4, zero);
    }

    __m256d two = _mm256_set1_pd(2.0);
    for (int i = 0; i < 4; ++i) {
        for (int j = 0; j < 4; ++j) {
            __m256d a = _mm256_loadu_pd(&x[8 * i]);
            __m256d b = _mm256_loadu_pd(&x[8 * i + 1]);
            __m256d c = _mm256_loadu_pd(&y[2 * j]);
            __m256d d = _mm256_loadu_pd(&y[2 * j + 1]);

            __m256d real_part = _mm256_sub_pd(
                _mm256_mul_pd(_mm256_mul_pd(a, c), two),
                _mm256_mul_pd(b, d)
            );
            __m256d imag_part = _mm256_add_pd(
                _mm256_mul_pd(_mm256_mul_pd(b, c), two),
                _mm256_mul_pd(_mm256_mul_pd(a, d), two)
            );

            real_part = _mm256_hadd_pd(real_part, real_part);
            real_part = _mm256_hadd_pd(real_part, real_part);
            imag_part = _mm256_hadd_pd(imag_part, imag_part);
            imag_part = _mm256_hadd_pd(imag_part, imag_part);

            int idx = (i * 4 + j) * 2;
            z[idx] = _mm256_extract_f64x2(real_part, 0);
            z[idx + 1] = _mm256_extract_f64x2(imag_part, 0);
        }
    }
}
>>>
make: *** [Makefile:13: benchmark] Error 1
<<<
CE
================================
#include <immintrin.h>
#include "common.h"

void max_performance(double *__restrict x, double *__restrict y, double *__restrict z) {
    for (int i = 0; i < 4; ++i) {
        for (int j = 0; j < 4; ++j) {
            __m256d x_real = _mm256_setr_pd(
                x[8*i + 0], x[8*i + 2], x[8*i + 4], x[8*i + 6]
            );
            __m256d x_imag = _mm256_setr_pd(
                x[8*i + 1], x[8*i + 3], x[8*i + 5], x[8*i + 7]
            );
            __m256d y_real = _mm256_load_pd(&y[2*j]);
            __m256d y_imag = _mm256_load_pd(&y[2*j + 1]);
            
            __m256d two = _mm256_set1_pd(2.0);
            __m256d prod_real = _mm256_sub_pd(
                _mm256_mul_pd(two, _mm256_mul_pd(x_real, y_real)),
                _mm256_mul_pd(x_imag, y_imag)
            );
            __m256d prod_imag = _mm256_add_pd(
                _mm256_mul_pd(two, _mm256_mul_pd(x_imag, y_real)),
                _mm256_mul_pd(two, _mm256_mul_pd(x_real, y_imag))
            );
            
            prod_real = _mm256_hadd_pd(prod_real, prod_real);
            prod_real = _mm256_hadd_pd(prod_real, prod_real);
            prod_imag = _mm256_hadd_pd(prod_imag, prod_imag);
            prod_imag = _mm256_hadd_pd(prod_imag, prod_imag);
            
            z[2*(4*i + j)] = _mm256_extract_element_pd(prod_real, 0);
            z[2*(4*i + j) + 1] = _mm256_extract_element_pd(prod_imag, 0);
        }
    }
}
>>>
make: *** [Makefile:13: benchmark] Error 1
<<<
CE
================================
#include <immintrin.h>
#include "common.h"

void max_performance(double *__restrict x, double *__restrict y, double *__restrict z) {
    for (int i = 0; i < 4; ++i) {
        for (int j = 0; j < 4; ++j) {
            double a[4] = {
                x[8*i],     x[8*i + 2], x[8*i + 4], x[8*i + 6],
            };
            double b[4] = {
                x[8*i + 1], x[8*i + 3], x[8*i + 5], x[8*i + 7],
            };
            __m256d va = _mm256_loadu_pd(a);
            __m256d vb = _mm256_loadu_pd(b);
            __m256d vc = _mm256_loadu_pd(&y[2*j]);
            __m256d vd = _mm256_loadu_pd(&y[2*j + 1]);
            __m256d v2 = _mm256_set1_pd(2.0);
            
            __m256d pr = _mm256_sub_pd(
                _mm256_mul_pd(v2, _mm256_mul_pd(va, vc)),
                _mm256_mul_pd(vb, vd)
            );
            __m256d pi = _mm256_add_pd(
                _mm256_mul_pd(v2, _mm256_mul_pd(vb, vc)),
                _mm256_mul_pd(v2, _mm256_mul_pd(va, vd))
            );
            
            double real = pr[0] + pr[1] + pr[2] + pr[3];
            double imag = pi[0] + pi[1] + pi[2] + pi[3];
            
            z[2*(i*4 + j)] = real;
            z[2*(i*4 + j) + 1] = imag;
        }
    }
}
>>>
Starting program. 2 functions registered.
The result of the 2th function is not correct.

Running: slow_performance1
9518.26 cycles

Running: max_performance
206.029 cycles
<<<
WA
================================