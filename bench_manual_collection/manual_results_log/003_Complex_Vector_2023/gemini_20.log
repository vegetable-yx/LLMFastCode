Rewrite `slow_performance` into `max_performance`, keeping inputs, outputs, and behavior identical with allowable total squared precision error of 1e-3.  
Only apply performance optimizations (algebraic simplification, cache-friendly memory access, SIMD/AVX-2, loop unrolling, etc.).  

**Assume the code executes on a single core, DO NOT introduce multithreading or parallelism.**

**Target system**
- Intel(R) Core(TM) Ultra 7 265K CPU @ 3.90GHz
- Caches: 240 KB L1 D + 32 KB L1 I per core, 3.00 MB L2 per core, 30 MB shared L3  
- GCC 12 on Debian Bookworm; compile with `-O3 -march=native -mavx2 -std=c++11`

**Hints**
- Write SIMDe code with <immintrin.h> whenever possible.
- Do not use libc functions as their performance is not good.

Return **only** the full, ready-to-compile `max_performance` functionâ€”no other text, comments, or explanations.


```
#include <immintrin.h>
#include <math.h>
#include "common.h"

// Precondition : 0 <= y[i] < 1.0, n = 1024
void slow_performance(double *__restrict x, double *__restrict y, int n)
{
    for (int i = 0; i < n; i++)
    {
        unsigned int k = floor(4.0 * y[i]);

        double real = x[2 * i];
        double imag = x[2 * i + 1];

        double real_sqr = real * real - imag * imag;
        double imag_sqr = 2.0 * real * imag;

        switch (k)
        {
        case 0:
            y[i] += fmin(real_sqr, imag_sqr);
            break;
        case 1:
            y[i] += fmax(real_sqr, imag_sqr);
            break;
        default:
            y[i] += real * real + imag * imag;
            break;
        }
    }
}

void max_performance(double *__restrict x, double *__restrict y, int n)
{
}
```


================================
#include <immintrin.h>
#include <algorithm>
#include <cmath>

void max_performance(double *__restrict x, double *__restrict y, int n) {
    const int step = 4;
    for (int i = 0; i < n; i += step) {
        __m256d y_vec = _mm256_loadu_pd(y + i);
        __m256d real_vec = _mm256_loadu_pd(x + 2 * i);
        __m256d imag_vec = _mm256_loadu_pd(x + 2 * i + 1);

        __m256d real_sqr_vec = _mm256_mul_pd(real_vec, real_vec);
        __m256d imag_sqr_vec = _mm256_mul_pd(imag_vec, imag_vec);
        __m256d real_imag_vec = _mm256_mul_pd(real_vec, imag_vec);
        __m256d two_vec = _mm256_set1_pd(2.0);
        __m256d two_real_imag_vec = _mm256_mul_pd(two_vec, real_imag_vec);

        __m256d real_sqr_minus_imag_sqr_vec = _mm256_sub_pd(real_sqr_vec, imag_sqr_vec);

        __m256d k_vec = _mm256_mul_pd(_mm256_loadu_pd(y + i), _mm256_set1_pd(4.0));
        __m256d k_vec_floored = _mm256_floor_pd(k_vec);

        for (int j = 0; j < step; ++j) {
            int k = (int)k_vec_floored.m256d_f64[j];
            double &current_y = y[i + j];

            switch (k) {
                case 0:
                    current_y += std::fmin(real_sqr_minus_imag_sqr_vec.m256d_f64[j], two_real_imag_vec.m256d_f64[j]);
                    break;
                case 1:
                    current_y += std::fmax(real_sqr_minus_imag_sqr_vec.m256d_f64[j], two_real_imag_vec.m256d_f64[j]);
                    break;
                default:
                    current_y += real_sqr_vec.m256d_f64[j] + imag_sqr_vec.m256d_f64[j];
                    break;
            }
        }
    }
}
>>>
make: *** [Makefile:13: benchmark] Error 1
<<<
CE
================================
#include <immintrin.h>
#include <math.h>
#include "common.h"

// Precondition : 0 <= y[i] < 1.0, n = 1024
void max_performance(double *__restrict x, double *__restrict y, int n)
{
    int i;
    __m256d y_v, real_v, imag_v, real_sqr_v, imag_sqr_v, four_v, one_v, zero_v;
    four_v = _mm256_set1_pd(4.0);
    one_v = _mm256_set1_pd(1.0);
    zero_v = _mm256_setzero_pd();

    for (i = 0; i <= n - 4; i += 4) {
        // Load y values
        y_v = _mm256_loadu_pd(y + i);

        // Load complex numbers
        real_v = _mm256_loadu_pd(x + 2 * i);
        imag_v = _mm256_loadu_pd(x + 2 * i + 1);

        // Calculate real_sqr = real^2 - imag^2 and imag_sqr = 2 * real * imag
        real_sqr_v = _mm256_fmsub_pd(real_v, real_v, _mm256_mul_pd(imag_v, imag_v)); // real^2 - imag^2
        imag_sqr_v = _mm256_mul_pd(_mm256_set1_pd(2.0), _mm256_mul_pd(real_v, imag_v)); // 2 * real * imag

        // Calculate k = floor(4.0 * y[i]) for this chunk
        __m256d k_v = _mm256_floor_pd(_mm256_mul_pd(four_v, y_v));
        
        //Case 0: y[i] += fmin(real_sqr, imag_sqr)
        __m256d result0 = _mm256_min_pd(real_sqr_v, imag_sqr_v);
        __m256d mask0 = _mm256_cmp_pd(k_v, zero_v, _CMP_EQ_OQ);
        y_v = _mm256_blendv_pd(y_v, _mm256_add_pd(y_v, result0), mask0);

        //Case 1: y[i] += fmax(real_sqr, imag_sqr)
        __m256d result1 = _mm256_max_pd(real_sqr_v, imag_sqr_v);
        __m256d mask1 = _mm256_cmp_pd(k_v, one_v, _CMP_EQ_OQ);
        y_v = _mm256_blendv_pd(y_v, _mm256_add_pd(y_v, result1), mask1);

        //Default: y[i] += real * real + imag * imag
        __m256d result_default = _mm256_add_pd(_mm256_mul_pd(real_v, real_v), _mm256_mul_pd(imag_v, imag_v));
        __m256d mask_default = _mm256_or_pd(_mm256_cmp_pd(k_v, _mm256_set1_pd(2.0), _CMP_GE_OQ), _mm256_cmp_pd(k_v, _mm256_set1_pd(2.0), _CMP_GE_OQ));
        y_v = _mm256_blendv_pd(y_v, _mm256_add_pd(y_v, result_default), mask_default);

        _mm256_storeu_pd(y + i, y_v);
    }

    // Handle remaining elements
    for (; i < n; i++) {
        unsigned int k = floor(4.0 * y[i]);
        double real = x[2 * i];
        double imag = x[2 * i + 1];
        double real_sqr = real * real - imag * imag;
        double imag_sqr = 2.0 * real * imag;
        switch (k) {
            case 0:
                y[i] += fmin(real_sqr, imag_sqr);
                break;
            case 1:
                y[i] += fmax(real_sqr, imag_sqr);
                break;
            default:
                y[i] += real * real + imag * imag;
                break;
        }
    }
}
>>>
Starting program. 2 functions registered.
The result of the 2th function is not correct.

Running: slow_performance
6771.35 cycles

Running: max_performance
1471.77 cycles
<<<
WA
================================
#include <immintrin.h>
#include <math.h>
#include "common.h"

// Precondition : 0 <= y[i] < 1.0, n = 1024
void max_performance(double *__restrict x, double *__restrict y, int n)
{
    int i = 0;
    for (; i + 3 < n; i += 4)
    {
        __m256d y_vec = _mm256_loadu_pd(y + i);
        __m256d x_real_vec = _mm256_loadu_pd(x + 2 * i);
        __m256d x_imag_vec = _mm256_loadu_pd(x + 2 * i + 1);

        __m256d real_sqr_vec = _mm256_fmsub_pd(x_real_vec, x_real_vec, _mm256_mul_pd(x_imag_vec, x_imag_vec));
        __m256d imag_sqr_vec = _mm256_mul_pd(_mm256_set1_pd(2.0), _mm256_mul_pd(x_real_vec, x_imag_vec));

        __m256d mask_0 = _mm256_castsi256_pd(_mm256_cmpeq_epi64(_mm256_castpd_si256(_mm256_mul_pd(_mm256_set1_pd(4.0), y_vec)), _mm256_setzero_si256()));
        __m256d mask_1 = _mm256_castsi256_pd(_mm256_cmpeq_epi64(_mm256_castpd_si256(_mm256_mul_pd(_mm256_set1_pd(4.0), y_vec)), _mm256_set1_epi64x(1)));
        __m256d mask_default = _mm256_xor_pd(_mm256_xor_pd(mask_0, _mm256_set1_pd(-0.0)), _mm256_xor_pd(mask_1, _mm256_set1_pd(-0.0)));

        __m256d min_vec = _mm256_min_pd(real_sqr_vec, imag_sqr_vec);
        __m256d max_vec = _mm256_max_pd(real_sqr_vec, imag_sqr_vec);
        __m256d sum_sqr_vec = _mm256_add_pd(_mm256_mul_pd(x_real_vec, x_real_vec), _mm256_mul_pd(x_imag_vec, x_imag_vec));

        y_vec = _mm256_add_pd(y_vec, _mm256_blendv_pd(_mm256_blendv_pd(min_vec, max_vec, mask_1), sum_sqr_vec, mask_default));
        _mm256_storeu_pd(y + i, y_vec);
    }

    for (; i < n; i++)
    {
        unsigned int k = floor(4.0 * y[i]);

        double real = x[2 * i];
        double imag = x[2 * i + 1];

        double real_sqr = real * real - imag * imag;
        double imag_sqr = 2.0 * real * imag;

        switch (k)
        {
        case 0:
            y[i] += fmin(real_sqr, imag_sqr);
            break;
        case 1:
            y[i] += fmax(real_sqr, imag_sqr);
            break;
        default:
            y[i] += real * real + imag * imag;
            break;
        }
    }
}
>>>
Starting program. 2 functions registered.
The result of the 2th function is not correct.

Running: slow_performance
6591.19 cycles

Running: max_performance
993.639 cycles
<<<
WA
================================