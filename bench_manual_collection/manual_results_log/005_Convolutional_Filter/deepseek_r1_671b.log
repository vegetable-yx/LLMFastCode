Rewrite `slow_performance` into `max_performance`, keeping inputs, outputs, and behavior identical with allowable total squared precision error of 1e-3.  
Only apply performance optimizations (algebraic simplification, cache-friendly memory access, SIMD/AVX-2, loop unrolling, etc.).  

**Assume the code executes on a single core, DO NOT introduce multithreading or parallelism.**

**Target system**
- Intel(R) Core(TM) Ultra 7 265K CPU @ 3.90GHz
- Caches: 240 KB L1 D + 32 KB L1 I per core, 3.00 MB L2 per core, 30 MB shared L3  
- GCC 12 on Debian Bookworm; compile with `-O3 -march=native -mavx2 -std=c++11`

**Hints**
- Write SIMDe code with <immintrin.h> whenever possible.
- Do not use libc functions as their performance is not good.

Return **only** the full, ready-to-compile `max_performance` functionâ€”no other text, comments, or explanations.


```
#include <immintrin.h>
#include "common.h"

void slow_performance(double *__restrict x, double *__restrict h, double *__restrict y)
{
    const int ON = N - K + 1;
    for (int i = 0; i < ON; i++)
    {
        for (int j = 0; j < ON; j++)
        {
            GET_Y(i, j) = 0.0;
            for (int k0 = 0; k0 < K; k0++)
            {
                for (int k1 = 0; k1 < K; k1++)
                {
                    GET_Y(i, j) += (i + j + k0 + k1 - 1) * GET_H(k0, k1) * fabs(GET_X(i + k0, j + k1));
                }
            }
        }
    }
}

void max_performance(double *__restrict x, double *__restrict h, double *__restrict y)
{
}
```


================================
#include <immintrin.h>
#include "common.h"

void max_performance(double *__restrict x, double *__restrict h, double *__restrict y)
{
    const int ON = N - K + 1;
    const __m256d abs_mask = _mm256_castsi256_pd(_mm256_set1_epi64x(0x7FFFFFFFFFFFFFFFLL));
    const __m256d base_offsets = _mm256_setr_pd(0.0, 1.0, 2.0, 3.0);

    for (int i = 0; i < ON; ++i) {
        for (int j = 0; j < ON; ++j) {
            double total = 0.0;
            const int base = i + j - 1;

            for (int k0 = 0; k0 < K; ++k0) {
                const double *h_row = h + k0 * K;
                const double *x_row = x + (i + k0) * N + j;

                __m256d sum_vec = _mm256_setzero_pd();
                int k1 = 0;

                for (; k1 <= K - 4; k1 += 4) {
                    __m256d h_vals = _mm256_loadu_pd(h_row + k1);
                    __m256d x_vals = _mm256_loadu_pd(x_row + k1);
                    x_vals = _mm256_and_pd(x_vals, abs_mask);

                    __m256d s_bc = _mm256_set1_pd(k1);
                    __m256d k1_vals = _mm256_add_pd(s_bc, base_offsets);
                    __m256d coeff = _mm256_add_pd(_mm256_set1_pd(base + k0), k1_vals);

                    __m256d product = _mm256_mul_pd(coeff, h_vals);
                    product = _mm256_mul_pd(product, x_vals);

                    sum_vec = _mm256_add_pd(sum_vec, product);
                }

                double partial_sum[4];
                _mm256_storeu_pd(partial_sum, sum_vec);
                double lane_sum = partial_sum[0] + partial_sum[1] + partial_sum[2] + partial_sum[3];

                for (; k1 < K; ++k1) {
                    double h_val = h_row[k1];
                    double x_val = fabs(x_row[k1]);
                    lane_sum += (base + k0 + k1) * h_val * x_val;
                }

                total += lane_sum;
            }

            y[i * ON + j] = total;
        }
    }
}
>>>
Starting program. 2 functions registered.

Running: slow_performance
70995.2 cycles

Running: max_performance
238819 cycles
<<<
70995.2 / 238819 = 0.29727618
================================
#include <immintrin.h>
#include "common.h"

void max_performance(double *__restrict x, double *__restrict h, double *__restrict y) {
    const int ON = N - K + 1;
    for (int j = 0; j < ON; ++j) {
        const int max_k1_vec = N - j - 4;
        for (int i = 0; i < ON; ++i) {
            const double a = i + j - 1.0;
            double sum_HX = 0.0, sum_k0k1HX = 0.0;
            for (int k0 = 0; k0 < K; ++k0) {
                int k1 = 0;
                if (max_k1_vec >= 0) {
                    const int k1_step = max_k1_vec < (K-4) ? max_k1_vec : (K-4);
                    for (; k1 <= k1_step; k1 += 4) {
                        const __m256d h_vec = _mm256_loadu_pd(&h[k0*K + k1]);
                        const __m256d x_vec = _mm256_abs_pd(_mm256_loadu_pd(&x[(i + k0)*N + (j + k1)]));
                        const __m256d hx = _mm256_mul_pd(h_vec, x_vec);
                        
                        const double base = k0 + k1;
                        const __m256d k_add = _mm256_add_pd(_mm256_set1_pd(base), _mm256_setr_pd(0.0, 1.0, 2.0, 3.0));
                        const __m256d term = _mm256_mul_pd(k_add, hx);
                        
                        __m256d sum_hx = hx;
                        sum_hx = _mm256_hadd_pd(sum_hx, sum_hx);
                        sum_HX += ((double*)&sum_hx)[0] + ((double*)&sum_hx)[2];
                        
                        __m256d sum_term = term;
                        sum_term = _mm256_hadd_pd(sum_term, sum_term);
                        sum_k0k1HX += ((double*)&sum_term)[0] + ((double*)&sum_term)[2];
                    }
                }
                for (; k1 < K; ++k1) {
                    const double h_val = h[k0*K + k1];
                    const double x_val = fabs(x[(i + k0)*N + (j + k1)]);
                    sum_HX += h_val * x_val;
                    sum_k0k1HX += (k0 + k1) * h_val * x_val;
                }
            }
            y[i*ON + j] = a * sum_HX + sum_k0k1HX;
        }
    }
}
>>>
make: *** [Makefile:13: benchmark] Error 1
<<<
CE
================================
#include <immintrin.h>
#include "common.h"

void max_performance(double *__restrict x, double *__restrict h, double *__restrict y)
{
    const int ON = N - K + 1;
    for (int i = 0; i < ON; ++i) {
        for (int j = 0; j < ON; ++j) {
            __m256d sum_a = _mm256_setzero_pd();
            __m256d sum_b = _mm256_setzero_pd();
            double sa = 0.0, sb = 0.0;

            for (int k0 = 0; k0 < K; ++k0) {
                int k1 = 0;
                for (; k1 <= K - 4; k1 += 4) {
                    const __m256d x_val = _mm256_abs_pd(_mm256_loadu_pd(&x[(i + k0) * N + j + k1]));
                    const __m256d h_val = _mm256_loadu_pd(&h[k0 * K + k1]);
                    
                    __m256d mod = _mm256_set1_pd(k0 + k1 - 1.0);
                    mod = _mm256_add_pd(mod, _mm256_setr_pd(0.0, 1.0, 2.0, 3.0));
                    
                    const __m256d ta = _mm256_mul_pd(h_val, x_val);
                    sum_a = _mm256_add_pd(sum_a, ta);
                    sum_b = _mm256_add_pd(sum_b, _mm256_mul_pd(ta, mod));
                }
                for (; k1 < K; ++k1) {
                    double x_abs = fabs(x[(i + k0) * N + j + k1]);
                    double term = h[k0 * K + k1] * x_abs;
                    sa += term;
                    sb += term * (k0 + k1 - 1.0);
                }
            }

            double tmp_a[4], tmp_b[4];
            _mm256_storeu_pd(tmp_a, sum_a);
            _mm256_storeu_pd(tmp_b, sum_b);
            
            double total_a = sa + tmp_a[0] + tmp_a[1] + tmp_a[2] + tmp_a[3];
            double total_b = sb + tmp_b[0] + tmp_b[1] + tmp_b[2] + tmp_b[3];
            y[i * ON + j] = (i + j) * total_a + total_b;
        }
    }
}
>>>
make: *** [Makefile:13: benchmark] Error 1
<<<
CE
================================