Rewrite `slow_performance` into `max_performance`, keeping inputs, outputs, and behavior identical with allowable total squared precision error of 1e-3.  
Only apply performance optimizations (algebraic simplification, cache-friendly memory access, SIMD/AVX-2, loop unrolling, etc.).  

**Assume the code executes on a single core, DO NOT introduce multithreading or parallelism.**

**Target system**
- Intel(R) Core(TM) Ultra 7 265K CPU @ 3.90GHz
- Caches: 240 KB L1 D + 32 KB L1 I per core, 3.00 MB L2 per core, 30 MB shared L3  
- GCC 12 on Debian Bookworm; compile with `-O3 -march=native -mavx2 -std=c++11`

**Hints**
- Write SIMDe code with <immintrin.h> whenever possible.
- Do not use libc functions as their performance is not good.

Return **only** the full, ready-to-compile `max_performance` functionâ€”no other text, comments, or explanations.


```
#include <immintrin.h>
#include "common.h"

#define K 4
#define N 128

#define GET_X(i, j) x[(i) * N + (j)]
#define GET_Y(i, j) y[(i) * ON + (j)]
#define GET_H(i, j) h[(i) * K + (j)]

void slow_performance(double *__restrict x, double *__restrict h, double *__restrict y)
{
    const int ON = N - K + 1;
    for (int i = 0; i < ON; i++)
    {
        for (int j = 0; j < ON; j++)
        {
            GET_Y(i, j) = 0.0;
            for (int k0 = 0; k0 < K; k0++)
            {
                for (int k1 = 0; k1 < K; k1++)
                {
                    GET_Y(i, j) += (i + j + k0 + k1 - 1) * GET_H(k0, k1) * fabs(GET_X(i + k0, j + k1));
                }
            }
        }
    }
}

void max_performance(double *__restrict x, double *__restrict h, double *__restrict y)
{
}
```


================================
#include <immintrin.h>
#include "common.h"

#define K 4
#define N 128

#define GET_X(i, j) x[(i) * N + (j)]
#define GET_Y(i, j) y[(i) * ON + (j)]
#define GET_H(i, j) h[(i) * K + (j)]

void max_performance(double *__restrict x, double *__restrict h, double *__restrict y)
{
    const int ON = N - K + 1;
    const __m256d sign_mask = _mm256_set1_pd(-0.0);
    for (int i = 0; i < ON; i++)
    {
        double *y_ptr = &GET_Y(i, 0);
        for (int j = 0; j < ON; j += 4)
        {
            __m256d y_val = _mm256_setzero_pd();
            for (int k0 = 0; k0 < K; k0++)
            {
                double *x_ptr = &GET_X(i + k0, j);
                __m256d x_val0 = _mm256_andnot_pd(sign_mask, _mm256_loadu_pd(x_ptr));
                __m256d x_val1 = _mm256_andnot_pd(sign_mask, _mm256_loadu_pd(x_ptr + 4));
                __m256d h_val = _mm256_broadcast_sd(&GET_H(k0, 0));
                for (int k1 = 0; k1 < K; k1++, x_ptr++, h_val = _mm256_permute4x64_pd(h_val, 0b01'00'11'10))
                {
                    __m256d x_abs = _mm256_blend_pd(x_val0, x_val1, 0b00001111);
                    y_val = _mm256_fmadd_pd(_mm256_set1_pd(i + j + k0 + k1 - 1), _mm256_mul_pd(h_val, x_abs), y_val);
                    x_val0 = _mm256_permute4x64_pd(x_val0, 0b01'00'11'10);
                    x_val1 = _mm256_permute4x64_pd(x_val1, 0b01'00'11'10);
                }
            }
            _mm256_storeu_pd(y_ptr + j, y_val);
        }
    }
}

>>>
make: *** [Makefile:13: benchmark] Error 1
<<<
CE
================================
#include <immintrin.h>
#include "common.h"

#define K 4
#define N 128

#define GET_X(i, j) x[(i) * N + (j)]
#define GET_Y(i, j) y[(i) * ON + (j)]
#define GET_H(i, j) h[(i) * K + (j)]

void max_performance(double *__restrict x, double *__restrict h, double *__restrict y)
{
    const int ON = N - K + 1;
    const __m256d sign_mask = _mm256_set1_pd(-0.0);

    for (int i = 0; i < ON; i++)
    {
        for (int j = 0; j < ON; j += 4)
        {
            __m256d y_vec = _mm256_setzero_pd();
            for (int k0 = 0; k0 < K; k0++)
            {
                __m256d x_vec[K];
                for (int k1 = 0; k1 < K; k1++)
                {
                    x_vec[k1] = _mm256_andnot_pd(sign_mask, _mm256_loadu_pd(&GET_X(i + k0, j + k1)));
                }
                __m256d h_vec0 = _mm256_broadcast_sd(&GET_H(k0, 0));
                __m256d h_vec1 = _mm256_broadcast_sd(&GET_H(k0, 1));
                __m256d h_vec2 = _mm256_broadcast_sd(&GET_H(k0, 2));
                __m256d h_vec3 = _mm256_broadcast_sd(&GET_H(k0, 3));

                y_vec = _mm256_fmadd_pd(_mm256_set1_pd(i + j + k0 - 1), _mm256_fmadd_pd(h_vec0, x_vec[0], _mm256_fmadd_pd(h_vec1, x_vec[1], _mm256_fmadd_pd(h_vec2, x_vec[2], _mm256_mul_pd(h_vec3, x_vec[3])))), y_vec);
                y_vec = _mm256_fmadd_pd(_mm256_set1_pd(1.0), _mm256_fmadd_pd(h_vec1, x_vec[0], _mm256_fmadd_pd(h_vec2, x_vec[1], _mm256_fmadd_pd(h_vec3, x_vec[2], _mm256_mul_pd(GET_H(k0, K - 1), x_vec[K - 1])))), y_vec);
                y_vec = _mm256_fmadd_pd(_mm256_set1_pd(2.0), _mm256_fmadd_pd(h_vec2, x_vec[0], _mm256_fmadd_pd(h_vec3, x_vec[1], _mm256_mul_pd(GET_H(k0, K - 1), x_vec[2]))), y_vec);
                y_vec = _mm256_fmadd_pd(_mm256_set1_pd(3.0), _mm256_fmadd_pd(h_vec3, x_vec[0], _mm256_mul_pd(GET_H(k0, K - 1), x_vec[1])), y_vec);
            }
            _mm256_storeu_pd(&GET_Y(i, j), y_vec);
        }
    }
}

>>>
make: *** [Makefile:13: benchmark] Error 1
<<<
CE
================================
#include <immintrin.h>
#include "common.h"

#define K 4
#define N 128

#define GET_X(i, j) x[(i) * N + (j)]
#define GET_Y(i, j) y[(i) * ON + (j)]
#define GET_H(i, j) h[(i) * K + (j)]

void max_performance(double *__restrict x, double *__restrict h, double *__restrict y)
{
    const int ON = N - K + 1;
    const __m256d sign_mask = _mm256_set1_pd(-0.0);

    for (int i = 0; i < ON; i++)
    {
        for (int j = 0; j < ON; j += 4)
        {
            __m256d y_vec = _mm256_setzero_pd();
            for (int k0 = 0; k0 < K; k0++)
            {
                __m256d h_row = _mm256_broadcast_sd(&GET_H(k0, 0));
                for (int k1 = 0; k1 < K; k1++)
                {
                    __m256d x_vec = _mm256_loadu_pd(&GET_X(i + k0, j + k1));
                    x_vec = _mm256_andnot_pd(sign_mask, x_vec);
                    __m256d tmp = _mm256_mul_pd(_mm256_set1_pd((i + j + k0 + k1 - 1) * GET_H(k0, k1)), x_vec);
                    y_vec = _mm256_add_pd(y_vec, tmp);
                }
            }
            _mm256_storeu_pd(&GET_Y(i, j), y_vec);
        }
    }
}

>>>
Starting program. 2 functions registered.
The result of the 2th function is not correct.

Running: slow_performance1
102444 cycles

Running: maxperformance
66663.4 cycles
<<<
WA
================================