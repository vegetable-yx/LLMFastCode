Rewrite `slow_performance` into `max_performance`, keeping inputs, outputs, and behavior identical with allowable total squared precision error of 1e-3.  
Only apply performance optimizations (algebraic simplification, cache-friendly memory access, SIMD/AVX-2, loop unrolling, etc.).  

**Assume the code executes on a single core, DO NOT introduce multithreading or parallelism.**

**Target system**
- Intel(R) Core(TM) Ultra 7 265K CPU @ 3.90GHz
- Caches: 240 KB L1 D + 32 KB L1 I per core, 3.00 MB L2 per core, 30 MB shared L3  
- GCC 12 on Debian Bookworm; compile with `-O3 -march=native -mavx2 -std=c++11`

**Hints**
- Write SIMDe code with <immintrin.h> whenever possible.
- Do not use libc functions as their performance is not good.

Return **only** the full, ready-to-compile `max_performance` functionâ€”no other text, comments, or explanations.


```
#include <immintrin.h>
#include "common.h"

void slow_performance(double *__restrict x, double *__restrict A, double *__restrict y)
{
    for (int j = 0; j < NC; j++)
        y[j] = 0;

    for (int i = 0; i < NR; i++)
    {
        for (int j = 0; j < NC; j++)
        {
            y[j] += A[i * NC + j] * x[i];
        }
    }
}

void max_performance(double *__restrict x, double *__restrict A, double *__restrict y)
{
}
```


================================
#include <immintrin.h>
#include "common.h"

void max_performance(double *__restrict x, double *__restrict A, double *__restrict y)
{
    const int NC_VEC = NC / 4;
    const int NC_REST = NC % 4;

    __m256d zero = _mm256_set1_pd(0.0);
    for (int j = 0; j < NC_VEC; j++) {
        _mm256_storeu_pd(y + j * 4, zero);
    }
    for (int j = NC_VEC * 4; j < NC; j++) {
        y[j] = 0;
    }

    for (int i = 0; i < NR; i++) {
        double xi = x[i];
        __m256d xi_vec = _mm256_set1_pd(xi);

        for (int j = 0; j < NC_VEC; j++) {
            __m256d A_row_j = _mm256_loadu_pd(A + i * NC + j * 4);
            __m256d y_j = _mm256_loadu_pd(y + j * 4);
            y_j = _mm256_fmadd_pd(A_row_j, xi_vec, y_j);
            _mm256_storeu_pd(y + j * 4, y_j);
        }

        for (int j = NC_VEC * 4; j < NC; j++) {
            y[j] += A[i * NC + j] * xi;
        }
    }
}
>>>
Starting program. 2 functions registered.

Running: slow_performance
209.474 cycles

Running: max_performance
209.188 cycles
<<<
209.474 / 209.188 = 1.00136719
================================
#include <immintrin.h>
#include "common.h"

void max_performance(double *__restrict x, double *__restrict A, double *__restrict y)
{
    __m256d zero = _mm256_setzero_pd();
    for (int j = 0; j < NC; j += 4)
    {
        _mm256_storeu_pd(y + j, zero);
    }

    for (int i = 0; i < NR; i++)
    {
        double xi = x[i];
        __m256d xmmxi = _mm256_set1_pd(xi);
        for (int j = 0; j < NC; j += 4)
        {
            __m256d tmp = _mm256_loadu_pd(A + i * NC + j);
            tmp = _mm256_mul_pd(tmp, xmmxi);
            __m256d old_y = _mm256_loadu_pd(y + j);
            old_y = _mm256_add_pd(old_y, tmp);
            _mm256_storeu_pd(y + j, old_y);
        }
    }
}
>>>
Starting program. 2 functions registered.

Running: slow_performance
209.64 cycles

Running: max_performance
209.72 cycles
<<<
209.64 / 209.72 = 0.99961854
================================
#include <immintrin.h>
#include "common.h"

void max_performance(double *__restrict x, double *__restrict A, double *__restrict y)
{
    const int unroll_factor = 4;
    __m256d zero = _mm256_set1_pd(0.0);
    for (int j = 0; j < NC; j += unroll_factor) {
        __m256d y0 = zero;
        for (int i = 0; i < NR; i++) {
            __m256d A_vector = _mm256_loadu_pd(A + i * NC + j);
            __m256d x_vector = _mm256_set1_pd(x[i]);
            y0 = _mm256_fmadd_pd(A_vector, x_vector, y0);
        }
        _mm256_storeu_pd(y + j, y0);
    }
}
>>>
Starting program. 2 functions registered.

Running: slow_performance
207.57 cycles

Running: max_performance
647.479 cycles
<<<
207.57 / 647.479 = 0.32058183
================================