Rewrite `slow_performance` into `max_performance`, keeping inputs, outputs, and behavior identical with allowable total squared precision error of 1e-3.  
Only apply performance optimizations (algebraic simplification, cache-friendly memory access, SIMD/AVX-2, loop unrolling, etc.).  

**Assume the code executes on a single core, DO NOT introduce multithreading or parallelism.**

**Target system**
- Intel(R) Core(TM) Ultra 7 265K CPU @ 3.90GHz
- Caches: 240 KB L1 D + 32 KB L1 I per core, 3.00 MB L2 per core, 30 MB shared L3  
- GCC 12 on Debian Bookworm; compile with `-O3 -march=native -mavx2 -std=c++11`

**Hints**
- Write SIMDe code with <immintrin.h> whenever possible.
- Do not use libc functions as their performance is not good.

Return **only** the full, ready-to-compile `max_performance` functionâ€”no other text, comments, or explanations.


```
#include "common.h"
#include <immintrin.h>
#include <math.h>

#define NC 32
#define NR 64

void slow_performance1(double *__restrict x __attribute__((aligned(32))), double *__restrict A __attribute__((aligned(32))), double *__restrict y __attribute__((aligned(32))))
{
    for (int j = 0; j < NC; j++)
        y[j] = 0;

    for (int i = 0; i < NR; i++)
    {
        for (int j = 0; j < NC; j++)
        {
            y[j] += A[i * NC + j] * x[i];
        }
    }
}

void max_performance(double *__restrict x, double *__restrict A, double *__restrict y)
{
}
```


================================
#include "common.h"
#include <immintrin.h>

#define NC 32
#define NR 64

void max_performance(double *__restrict x, double *__restrict A, double *__restrict y)
{
    __m256d zero = _mm256_setzero_pd();
    __m256d y_vec[NC / 4];
    for (int j = 0; j < NC / 4; ++j)
        y_vec[j] = zero;

    for (int i = 0; i < NR; ++i)
    {
        __m256d x_val = _mm256_broadcast_sd(x + i);
        double *a_row = A + i * NC;
        for (int j = 0; j < NC; j += 4)
        {
            __m256d a_vec = _mm256_load_pd(a_row + j);
            y_vec[j / 4] = _mm256_fmadd_pd(a_vec, x_val, y_vec[j / 4]);
        }
    }

    for (int j = 0; j < NC / 4; ++j)
        _mm256_store_pd(y + j * 4, y_vec[j]);
}

>>>
Starting program. 2 functions registered.

Running: slow_performance1
209.673 cycles

Running: maxperformance
250.189 cycles
<<<
209.673 / 250.189 = 0.8380584278285617
================================
```cpp
#include "common.h"
#include <immintrin.h>

#define NC 32
#define NR 64

void max_performance(double *__restrict x, double *__restrict A, double *__restrict y)
{
    __m256d zero = _mm256_setzero_pd();
    __m256d y_vec[NC / 4];
    for (int j = 0; j < NC / 4; j++)
        y_vec[j] = zero;

    for (int i = 0; i < NR; i++)
    {
        __m256d x_val = _mm256_broadcast_sd(x + i);
        double *a_row = A + i * NC;
        for (int j = 0; j < NC; j += 4)
        {
            __m256d a_vec = _mm256_load_pd(a_row + j);
            __m256d mul = _mm256_mul_pd(a_vec, x_val);
            y_vec[j / 4] = _mm256_add_pd(y_vec[j / 4], mul);
        }
    }

    for (int j = 0; j < NC; j += 4)
        _mm256_store_pd(y + j, y_vec[j / 4]);
}
```
>>>
Running: slow_performance1
208.457 cycles

Running: maxperformance
209.382 cycles
<<<
208.457 / 209.382 = 0.9955822372505755
================================
```cpp
#include "common.h"
#include <immintrin.h>

#define NC 32
#define NR 64

void max_performance(double *__restrict x, double *__restrict A, double *__restrict y)
{
    __m256d zero = _mm256_setzero_pd();
    for (int j = 0; j < NC; j += 4)
    {
        _mm256_store_pd(y + j, zero);
    }

    for (int i = 0; i < NR; ++i)
    {
        __m256d xi = _mm256_set1_pd(x[i]);
        int base = i * NC;
        for (int j = 0; j < NC; j += 4)
        {
            __m256d a = _mm256_load_pd(A + base + j);
            __m256d yv = _mm256_load_pd(y + j);
            yv = _mm256_fmadd_pd(a, xi, yv);
            _mm256_store_pd(y + j, yv);
        }
    }
}
```
>>>
Running: slow_performance1
208.552 cycles

Running: maxperformance
207.236 cycles
<<<
208.552 / 207.236 = 1.0063502480264046
================================