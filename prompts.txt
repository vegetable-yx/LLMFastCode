Rewrite `slow_performance` into `max_performance`, keeping inputs and outputs identical.  
The only changes allowed are performance optimizations (e.g., algebraic simplification, cache-friendly memory access, SIMD, loop unrolling for ILP, etc.).  
Return **only** the full, ready-to-compile `max_performance` function at the very end of your reply with no extra text, comments, or explanations.






I have the following C++ code that includes a function called "slow_performance".
Please rewrite the given "slow_performance" function into the "max_performance" function, fully preserving the functionality, inputs and outputs, exactly as in the original implementation.
The only acceptable difference must be performance-related optimizations that significantly improve computational efficiency and minimize the total execution cycles.
You should begin with analyzing what the code computes and try to optimize the code based on your analysis. Here are some possible ways:
    1. reducing unnecessary instructions by algebraic transformations
    2. optimize memory accesses for cache 
    2. SIMD vectorization
    4. ILP optimization such as unrolling
Your answer MUST strictly **ONLY** contain the complete and optimized implementation of the "max_performance" function at **THE END OF YOUR OUTPUT**. No other text, comments, or explanations should be included!
Ensure the provided function implementation is immediately ready for compilation and use as-is, preserving identical behavior relative to "slow_performance".